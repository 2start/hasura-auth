fragment userFields on users {
  id
  displayName
  avatarUrl
  email
  passwordHash
  active
  defaultRole
  roles {
    role
  }
  isAnonymous
  ticket
  otpSecret
  mfaEnabled
  passwordHash
  newEmail
  lastConfirmationEmailSentAt
  locale
}

query user($id: uuid!) {
  user(id: $id) {
    ...userFields
  }
}

query users($where: users_bool_exp!) {
  users(where: $where) {
    ...userFields
  }
}

# WHERE
#   refreshToken = $refreshToken
#   AND (
#     user.active = true
#     OR (
#       user.active =  false
#       AND user.isAnonymous
#     )
#   )
# The reason is, we don't want users to select a refresh token if the user
# is not active. Except if the user anonymous. Then we can allow it.
# A user can be anonymous but with active = false when the user converts their
# account to a real account but has not yet activated it aka verified their email.
query usersByRefreshToken($refreshToken: uuid!) {
  authRefreshTokens(
    where: {
      _and: [
        { refreshToken: { _eq: $refreshToken } }
        {
          _or: [
            { user: { active: { _eq: true } } }
            {
              _and: [
                { user: { active: { _eq: false } } }
                { user: { isAnonymous: { _eq: true } } }
              ]
            }
          ]
        }
        { expiresAt: { _gte: now } }
      ]
    }
  ) {
    user {
      ...userFields
    }
  }
}

mutation updateUser($id: uuid!, $user: users_set_input!) {
  updateUser(pk_columns: { id: $id }, _set: $user) {
    ...userFields
  }
}

mutation rotateUsersTicket(
  $oldTicket: uuid!
  $newTicket: uuid!
  $newTicketExpiresAt: timestamptz!
) {
  updateUsers(
    _set: { ticket: $newTicket, ticketExpiresAt: $newTicketExpiresAt }
    where: { ticket: { _eq: $oldTicket } }
  ) {
    affected_rows
  }
}

mutation activateUsers(
  $ticket: uuid!
  $newTicket: uuid!
  $newTicketExpiresAt: timestamptz!
) {
  updateUsers(
    _set: {
      active: true
      ticket: $newTicket
      ticketExpiresAt: $newTicketExpiresAt
    }
    where: { _and: [{ active: { _eq: false } }, { ticket: { _eq: $ticket } }] }
  ) {
    returning {
      ...userFields
    }
  }
}

mutation changeEmailsByTicket(
  $ticket: uuid!
  $email: citext!
  $newTicket: uuid!
  $now: timestamptz!
) {
  updateUsers(
    where: {
      _and: [{ ticket: { _eq: $ticket } }, { ticketExpiresAt: { _gt: $now } }]
    }
    _set: {
      email: $email
      newEmail: null
      ticket: $newTicket
      ticketExpiresAt: $now
    }
  ) {
    returning {
      ...userFields
    }
  }
}

mutation insertUser($user: users_insert_input!) {
  insertUser(object: $user) {
    ...userFields
  }
}

mutation deleteUser($userId: uuid!) {
  deleteUser(id: $userId) {
    ...userFields
  }
}

mutation deanonymizeUser(
  $userId: uuid!
  $user: users_set_input!
  $userRoles: [authUserRoles_insert_input!]!
) {
  updateUser(pk_columns: { id: $userId }, _set: $user) {
    id
  }

  deleteAuthUserRoles(where: { userId: { _eq: $userId } }) {
    affected_rows
  }

  insertAuthUserRoles(objects: $userRoles) {
    affected_rows
  }
}

mutation insertProviderToUser(
  $provider: authProviders_insert_input!
  $userId: uuid!
) {
  insertAuthProvider(object: $provider) {
    name
    code
  }
  updateUser(pk_columns: { id: $userId }, _set: { active: true }) {
    ...userFields
  }
}

mutation updateUsersByTicket($ticket: uuid!, $user: users_set_input!) {
  updateUsers(
    where: {
      _and: [{ ticket: { _eq: $ticket } }, { ticketExpiresAt: { _gt: now } }]
    }
    _set: $user
  ) {
    affected_rows
    returning {
      ...userFields
    }
  }
}
